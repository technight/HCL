buildscript {
    ext.kotlin_version = '1.2.31'

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.15"
        classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.0.0.RC6-3"
        classpath 'com.palantir:jacoco-coverage:0.4.0'
        classpath "gradle.plugin.org.jmailen.gradle:kotlinter-gradle:1.12.0"
    }
}

group 'codes.hcl'
version '1.0-SNAPSHOT'

ext.junitJupiterVersion = '5.0.2'
ext.log4jVersion = '2.9.0'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: 'com.palantir.jacoco-coverage'
apply plugin: 'org.jmailen.kotlinter'

detekt {
    version = "1.0.0.RC6-3"
    profile("main") {
        input = "$projectDir/src/main/kotlin"
        config = "$projectDir/default-detekt-config.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
    }
    idea {
        path = "$projectDir/.idea"
        codeStyleScheme = "$projectDir/.idea/idea-code-style.xml"
        inspectionsProfile = "$projectDir/.idea/inspect.xml"
        report = "project.projectDir/reports"
        mask = "*.kt,"
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"

    kotlinTasks {
        defaultKotlinTasks()
    }

    jdkVersion = 8 // Used for linking to JDK

    impliedPlatforms = ["JVM"] // See platforms section of documentation

        // Specifies the location of the project source code on the Web.
    // If provided, Dokka generates "source" links for each declaration.
    // Repeat for multiple mappings
    linkMapping {
        // Source directory
        dir = "src/main/kotlin"

        // URL showing where the source code can be accessed through the web browser
        url = "https://github.com/HotCL/P4-HCL/blob/master/code/src/main/kotlin/"

        // Suffix which is used to append the line number to the URL. Use #L for GitHub
        suffix = "#L"
    }
}

jacoco {
    toolVersion = '0.7.9'
    applyTo junitPlatformTest
}

jacocoCoverage {
    // Set to 0.7 again!
    reportThreshold 0.65, COMPLEXITY
    reportThreshold 0.6, BRANCH
    reportThreshold 0.8
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/Main*', '**/AstNode*','**/ExprResult*','**/LambdaBodyWithType*',
                                        '**/exceptions/*', '**/FilePair*','**/HCL*', '**/REPL*',
                                        '**/KotlinLambdaExpression*', '**/KotlinFunctionCall*', '**/KotlinIdentifier*',
                                        '**/KotlinLambdaCollection*', '**/KotlinLambdaBody*', '**/KotlinBoolean*',
                                        '**/KotlinList*', '**/KotlinTuple*', '**/KotlinText*'])
        })
    }
}

junitPlatformTest {
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}

junitPlatform {
    // platformVersion '1.0.2'
    filters {
        engines {
            // include 'junit-jupiter', 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    // configurationParameter 'junit.jupiter.conditions.deactivate', '*'
    // enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    logManager 'org.apache.logging.log4j.jul.LogManager'
}


mainClassName = 'MainKt'

repositories {
    mavenCentral()
    maven { url "http://dl.bintray.com/jetbrains/spek" }
    maven { url "https://dl.bintray.com/ajalt/maven" }
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    test.java.srcDirs += 'src/test/kotlin/'
}


dependencies {
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.21"
    compile "org.jline:jline:3.7.0"
    compile 'com.natpryce:hamkrest:1.4.2.2'
    compile 'com.github.ajalt:clikt:1.2.0'

    testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")

    testCompile 'org.jetbrains.spek:spek-api:1.1.5'
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testRuntime('org.jetbrains.spek:spek-junit-platform-engine:1.1.5')

    // To use Log4J's LogManager
    testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    testRuntime("org.apache.logging.log4j:log4j-jul:${log4jVersion}")

    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'MainKt'
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}
